import logging
import os

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, Bot, ParseMode
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, Filters


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)


RULES = """
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É! –ß—Ç–æ–±—ã –Ω–∞–º –∑–¥–µ—Å—å –≤—Å–µ–º –±—ã–ª–æ —É—é—Ç–Ω–æ, –≤ –≥—Ä—É–ø–ø–µ –¥–µ–π—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞:

1. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É —Å —É–≤–∞–∂–µ–Ω–∏–µ–º. –ú—ã –Ω–µ –ø—Ä–∏–µ–º–ª–µ–º –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π, –∞ —Ç–∞–∫–∂–µ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—é –ø–æ –ø—Ä–∏–∑–Ω–∞–∫—É –ø–æ–ª–∞, –≤–Ω–µ—à–Ω–æ—Å—Ç–∏, –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏, —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –≥–µ–Ω–¥–µ—Ä–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏.

2. –ú—ã –Ω–µ –ø—É–±–ª–∏–∫—É–µ–º –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Å–ø–∞–º.

–í –æ—Å—Ç–∞–ª—å–Ω–æ–º –∂–µ —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω–∞—è —Å–≤–æ–±–æ–¥–∞ –¥–µ–π—Å—Ç–≤–∏—è! –ï—Å–ª–∏ –≤–∞—à –ø–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏, –æ–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ t.me/overheard_at_shad –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
"""


def escape(s):
    """Escape characters forbidden by Telegram API"""
    to_escape = '_*~[]()`>#+-=|{}.!'
    for c in to_escape:
        s = s.replace(c, '\\' + c)
    return s


def start_command(update: Update, context: CallbackContext) -> None:
    """Return a welcome message and rules"""
    logger.info("Someone's initiated a contact")
    update.message.reply_text(text=RULES, parse_mode=ParseMode.HTML)


def receive_post(update: Update, context: CallbackContext) -> None:
    """A new post has been submitted -- ask the user if they want to add tags"""

    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("#—Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–µ", callback_data='tag-—Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–µ')],
        [InlineKeyboardButton("–±–µ–∑ —Ç–µ–≥–∞", callback_data='tag-none')],
    ])

    logger.info("Received someone's post")
    response = f"<b>–¢–≤–æ–π –ø–æ—Å—Ç:</b>\n\n{update.message.text}\n\n<b>–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥?</b>"
    update.message.reply_text(escape(response), reply_markup=reply_markup, parse_mode=ParseMode.HTML)


def tag_post(update: Update, context: CallbackContext) -> None:
    """A post has been tagged -- ask the user if they are ready for submission"""

    query = update.callback_query
    query.answer()

    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚úÖ", callback_data='confirm-yes')],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å ‚õîÔ∏è", callback_data='confirm-no')]
    ])
    post_body = '\n'.join(query.message.text.split('\n')[2:-2])

    if query.data != 'tag-none':
        tag = query.data.split('-')[1]
        post_body += f"\n#{tag}"

    response = f"*–¢–≤–æ–π –ø–æ—Å—Ç:*\n\n{post_body}\n\n*–ì–æ—Ç–æ–≤–æ?*"
    query.edit_message_text(text=escape(response), reply_markup=reply_markup, parse_mode=ParseMode.HTML)


def confirm_post(update: Update, context: CallbackContext) -> None:
    """A user has confirmed submission of a post -- send it to the moderator's group for approval"""

    query = update.callback_query
    query.answer()

    reply_markup = InlineKeyboardMarkup([[
        InlineKeyboardButton("üëç", callback_data='approve-yes'),
        InlineKeyboardButton("üëé", callback_data='approve-no')
    ]])
    post_body = '\n'.join(query.message.text.split('\n')[2:-2])

    if query.data == 'confirm-no':
        query.delete_message()
    else:
        response = f"üî• <b>–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</b> üî•\n\n{post_body}\n\n"
        query.edit_message_text(text=escape(response), parse_mode=ParseMode.HTML)

        bot = Bot(token=os.environ['TOKEN'])
        bot.send_message(chat_id=os.environ['MOD_CHAT_ID'], text=escape(post_body), reply_markup=reply_markup, parse_mode=ParseMode.HTML)


def approve_post(update: Update, context: CallbackContext) -> None:
    """A moderator has reviewed a post -- either delete or publish it"""

    query = update.callback_query
    query.answer()

    post_body = query.message.text

    if str(query.message.chat.id) != os.environ['MOD_CHAT_ID']:
        # This callback should only be called from the moderators' group
        logger.warning("Someone's trying to impersonate a moderator")
        return
    
    if query.data == 'approve-yes':
        query.delete_message()
        bot = Bot(token=os.environ['TOKEN'])
        bot.send_message(chat_id=os.environ['CHANNEL_ID'], text=escape(post_body), parse_mode=ParseMode.HTML)
    else:
        query.delete_message()


def main() -> None:
    updater = Updater(os.environ["TOKEN"])

    # Add handlers
    updater.dispatcher.add_handler(CommandHandler('start', start_command))
    updater.dispatcher.add_handler(CommandHandler('help', start_command))
    updater.dispatcher.add_handler(CallbackQueryHandler(tag_post, pattern="^tag-"))
    updater.dispatcher.add_handler(CallbackQueryHandler(confirm_post, pattern="^confirm-"))
    updater.dispatcher.add_handler(CallbackQueryHandler(approve_post, pattern="^approve-"))
    updater.dispatcher.add_handler(MessageHandler(Filters.update.message, receive_post))

    # Start the Bot
    updater.start_polling()

    # Run the bot until the user presses Ctrl-C or the process receives SIGINT, SIGTERM or SIGABRT
    updater.idle()


if __name__ == '__main__':
    main()
